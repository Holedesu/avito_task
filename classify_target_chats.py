import json
import csv
import datetime
from typing import List, Dict, Any
from collections import Counter
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞
KEYWORDS = {
    "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", "—Ö–æ—á—É", "–º–æ–∂–Ω–æ", "–¥–µ–ª–∞–µ—Ç–µ", "–∑–∞–∫–∞–∑–∞—Ç—å",
    "—Å—Ä–æ–∫", "–≤–æ–∑–º–æ–∂–Ω–æ", "–æ—Ñ–æ—Ä–º–∏—Ç—å", "—É—Å–ª—É–≥–∞", "–ø–æ–º–æ—â—å", "–ø—Ä–∞–π—Å", "–Ω—É–∂–Ω–æ",
    "–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ", "—Å–¥–µ–ª–∞—Ç—å", "–∑–≤–æ–Ω–æ–∫", "—Å–æ–∑–≤–æ–Ω", "–Ω–æ–º–µ—Ä", "–∫–æ–Ω—Ç–∞–∫—Ç", "—Å–≤—è–∂–∏—Ç–µ—Å—å",
    "–Ω–∞–ø–∏—Å–∞—Ç—å", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å", "—Ä–∞—Å—á–µ—Ç", "–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞", "–ø–æ–º–æ–≥–∏—Ç–µ",
    "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "—Å–∫–∏–Ω—É—Ç—å", "–∫–æ–¥", "–∫–∏–∑", "—á–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫", "–¥–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã",
    "–∏—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ", "—Ç–≥", "–≤–æ—Ç—Å–∞–ø", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–∑–≤–æ–Ω–∏—Ç—å", "+7", "c—É–º–º–∞", "—Ä—É–±",
    "–æ–ø–ª–∞—Ç—É –ø—Ä–æ–∏–∑–≤–µ–ª", "–æ–ø–ª–∞—Ç–∏–ª"
}

EXCLUDE_IF_CONTAINS = {"—Ä–µ–∑—é–º–µ", "–∫–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏–Ω—Ç–µ—Ä–≤—å—é", "–Ω–µ –º–æ–∂–µ–º"}
MIN_KEYWORD_MATCHES = 2
MIN_TEXT_LENGTH = 80

def get_seller_id(chat: Dict) -> int:
    return chat.get("dialog", {}).get("context", {}).get("value", {}).get("user_id", -1)

def is_target_chat(full_text: str, messages: List[Dict]) -> bool:
    lowered = full_text.lower()
    if any(ex in lowered for ex in EXCLUDE_IF_CONTAINS):
        return False
    if len(messages) > 3 and len(lowered) > MIN_TEXT_LENGTH:
        return True
    hits = sum(1 for k in KEYWORDS if k in lowered)
    return hits >= MIN_KEYWORD_MATCHES and len(lowered) > MIN_TEXT_LENGTH

def classify_target_chats(chats: List[Any]) -> List[Any]:
    results = []
    for chat in chats:
        if any(m.get("author_id") == 0 for m in chat.get("messages", [])):
            continue
        dialog_id = chat.get("dialog_id") or chat.get("dialog", {}).get("id")
        messages = chat["messages"]
        seller_id = get_seller_id(chat)

        # —Å–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å id‚Üí–∏–º—è
        user_names = {}
        for u in chat.get("dialog", {}).get("users", []):
            if "id" in u:
                user_names[u["id"]] = u.get("name", f"User_{u['id']}")

        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–ø–∏—Å–∫–∏
        sorted_msgs = sorted(messages, key=lambda m: m.get("created", 0))
        full_text = ""
        for m in sorted_msgs:
            txt = m.get("content", {}).get("text")
            if not txt: continue
            ts = m.get("created")
            ts_str = datetime.datetime.fromtimestamp(ts).strftime("%Y-%m-%d %H:%M:%S") if ts else ""
            author = "üè¢ –ú–µ–Ω–µ–¥–∂–µ—Ä" if m.get("author_id") == seller_id else f"üë§ {user_names.get(m.get('author_id'), m.get('author_id'))}"
            full_text += f"[{ts_str}] {author}: {txt}\n"

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∫—É
        if is_target_chat(full_text, sorted_msgs):
            label = "—Ü–µ–ª–µ–≤–æ–π"
        elif any(ex in full_text.lower() for ex in EXCLUDE_IF_CONTAINS):
            label = "–Ω–µ—Ü–µ–ª–µ–≤–æ–π"
        else:
            label = "—Å–ø–æ—Ä–Ω—ã–π"

        # –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª –º–µ–Ω—å—à–µ –¥–≤—É—Ö —Ä–∞–∑ ‚Äî —Å–ø–æ—Ä–Ω—ã–π
        client_msgs = [m for m in sorted_msgs if m.get("author_id") != seller_id and m.get("content", {}).get("text")]
        if len(client_msgs) < 2:
            label = "—Å–ø–æ—Ä–Ω—ã–π"

        results.append({
            "dialog_id": dialog_id,
            "dialog":    chat.get("dialog", {}),
            "text_sample": full_text.strip(),
            "label":     label
        })
    return results

def print_chats_reversed(analyzed: List[Dict]) -> None:
    for chat in analyzed:
        print("="*80)
        print(f"üìå –î–∏–∞–ª–æ–≥: {chat['dialog_id']} ‚Äî {chat['label'].upper()}")
        print(chat["text_sample"])
        print()

def main():
    try:
        with open("avito_chats.json", "r", encoding="utf-8") as f:
            raw = json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    # –ø—Ä–∏–≤–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    chats = []
    for did, entry in raw.items():
        chats.append({
            "dialog_id": did,
            "dialog":    entry.get("chat_meta", {}),
            "messages":  entry.get("messages", [])
        })

    analyzed = classify_target_chats(chats)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    try:
        with open("chat_targets.json", "w", encoding="utf-8") as f:
            json.dump(analyzed, f, ensure_ascii=False, indent=2)
        with open("chat_targets.csv", "w", encoding="utf-8", newline="") as f:
            fieldnames = ["dialog_id", "label", "text_sample"]
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            for row in analyzed:
                # –æ—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
                filtered = {k: row[k] for k in fieldnames}
                writer.writerow(filtered)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        return

    # –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    counts = Counter(item["label"] for item in analyzed)
    logging.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    for lbl, cnt in counts.items():
        print(f"{lbl.capitalize()}: {cnt}")

    # –≤—ã–≤–æ–¥ —Å–∞–º–∏—Ö —á–∞—Ç–æ–≤
    print("\nüóÇ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —á–∞—Ç–æ–≤:")
    print_chats_reversed(analyzed)


if __name__ == "__main__":
    main()

